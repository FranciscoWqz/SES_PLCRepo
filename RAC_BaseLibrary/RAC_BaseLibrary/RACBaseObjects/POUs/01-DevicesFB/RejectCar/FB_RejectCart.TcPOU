<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RejectCart" Id="{743a376f-4fa0-4fba-821c-e0b7d34bd821}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RejectCart EXTENDS FB_Machine
VAR_INPUT
	// Device identification
	sLockCylinerID					: STRING;
	
	// Safety box permissive for release and remove cart
	bSafetyBox_permissive			: BOOL;
	
	// Reject request
	bPlacePieceOnCartRequest		: BOOL;
END_VAR
VAR_OUTPUT
	// Safety box enter permissive
	bSafetyBox_okForEnter			: BOOL;
	
	// Request for pieces removal when cart is full
	bRemovePiecesRequest			: BOOL;
	
	// Sensors presence array
	byAvailableNests				: ARRAY[0..7] OF BOOL;
END_VAR
VAR
	// Timmers for considering cart in place
	tonCartIsInPlace				: TON;
	
	// Timmers for considering cart removed
	tonCartRemoved					: TON;

	// Occuped nests in reject cart
	siOccupedNests					: SINT;
	
	// Cart is in position sensor
	bCartPresence					AT %I* : BOOL;
	// 8 sensor array
	byRejectNestsSensors			AT %I* : ARRAY[0..7] OF BOOL;

	// Cylinder for locking the cart in place
	fbCartLock						: FB_Cylinder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[	CountNests();

//	Run the standar main for any machine
	SUPER^.MachineMain();

//	Safety permisive conditions for any device
	fbCartLock(						diStationState:=diStationState,
									sDeviceID:='',
									bStopExecution:=bStopExecution,
									bAlarmReset:=bAlarmReset,
									bPermisiveExtend:= bCartPresence AND bSafetyBox_permissive,
									bPermisiveRetract:= bCartPresence AND bSafetyBox_permissive,
									Timeout:= T#1S);
	fbCartLock.bExtendRequest		:=FALSE;
	fbCartLock.bRetractRequest		:=FALSE;]]></ST>
    </Implementation>
    <Method Name="Alarm" Id="{a2e3233f-e38e-4263-92eb-523118066f8e}">
      <Declaration><![CDATA[METHOD  Alarm]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	Step timeout
	ton_StepTimeout(					IN:= diActualSeqStep=diLastActiveStep,
										PT:= T#1S);

// 	Following of sequence for setting timeout
	IF diLastActiveStep<>diActualSeqStep THEN
		diLastActiveStep					:= diActualSeqStep;
	END_IF

//	For setting an sequence alarm code
	IF ton_StepTimeout.Q THEN
		CASE diActualSeqStep OF
			10: 	sAlarm				:= '';	// Init wait cart in position timeout
			50: 	sAlarm				:= '';	// Cart clamping timeout
			110: 	sAlarm				:= '';	// Cart removal timeout
			1000: 	sAlarm				:= '';	// Cart in position and clamped timeout
			1100: 	sAlarm				:= '';	// Cart removal timeout
		END_CASE
	END_IF

//	Concat general alarm codes with cart lock cylinder alarm codes
	sAlarm								:= CONCAT(STR1:=sAlarm,STR2:=fbCartLock.sAlarm);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Auto" Id="{ceee8003-41cf-4c72-a85c-d9e2b0f68d8c}">
      <Declaration><![CDATA[METHOD  Auto]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	Keep sequencer in range
	IF diActualSeqStep<1000 OR diActualSeqStep>1999 THEN
		diActualSeqStep					:= 1000;
	END_IF

CASE diActualSeqStep OF
	1000:								//	Check for cart in position and it is clamped
		IF tonCartIsInPlace.Q AND fbCartLock.bIsExtended THEN
			fbCartLock.bRetractRequest	:= FALSE;
			fbCartLock.bExtendRequest	:= FALSE;
			diActualSeqStep				:= 1050;
	
		ELSIF tonCartIsInPlace.Q AND fbCartLock.bIsRetracted THEN
			fbCartLock.bRetractRequest	:= FALSE;
			fbCartLock.bExtendRequest	:= TRUE;
	
		ELSE
			fbCartLock.bExtendRequest	:= FALSE;
			fbCartLock.bRetractRequest	:= TRUE;
		END_IF
	1050:								//	If there are not availability of places in cart release it and wait it has been removed
		IF siOccupedNests>=8 THEN
			fbCartLock.bExtendRequest	:= FALSE;
			fbCartLock.bRetractRequest	:= TRUE;
		END_IF
		IF fbCartLock.bIsRetracted THEN
			diActualSeqStep				:= 1100;
		END_IF
	1100:								//	Waiting cart removal
		IF tonCartRemoved.Q THEN
			diActualSeqStep				:= 1000;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CountNests" Id="{8133da23-9cf7-4a1d-8bcc-54b50f8bc5bf}">
      <Declaration><![CDATA[METHOD CountNests
VAR
	indexCountOccuped					: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//  Counts occuped nests in the cart
	siOccupedNests					:= 0;
	FOR indexCountOccuped:=0 TO 7 BY 1 DO
		IF byRejectNestsSensors[indexCountOccuped] THEN
			siOccupedNests				:= siOccupedNests + 1;
		END_IF
	END_FOR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{fcbb3f26-0058-4481-9c58-3d096317d08f}">
      <Declaration><![CDATA[METHOD  Init]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	Keep sequencer in range
	IF diActualSeqStep<0 OR diActualSeqStep>999 THEN
		diActualSeqStep					:= 0;
	END_IF

CASE diActualSeqStep OF
	0:									//	Wait for the initial permisive and reset values
		IF  bInit_StartPermissive THEN
			fbCartLock.bRetractRequest	:= FALSE;
			fbCartLock.bExtendRequest	:= FALSE;
			diActualSeqStep 			:= 10;
		END_IF
	10:									// Check cart is in place
		IF tonCartIsInPlace.Q THEN
			diActualSeqStep 			:= 50;
		ELSE
			fbCartLock.bRetractRequest:=TRUE;
		END_IF
	50:									// Confirm cart is clamped
		fbCartLock.bRetractRequest		:= FALSE;
		fbCartLock.bExtendRequest		:= TRUE;
		IF fbCartLock.bIsExtended THEN
			fbCartLock.bExtendRequest	:= FALSE;
			diActualSeqStep				:= 100;
		END_IF
	100:								// Check reject nest availability for release cart
		IF siOccupedNests>=4 THEN
			diActualSeqStep				:= 110;
		ELSE
			diActualSeqStep 			:= 999;
		END_IF
	110:								// Unlock cart and wait it's removed
		bRemovePiecesRequest			:= TRUE;
		fbCartLock.bRetractRequest		:= TRUE;
		IF fbCartLock.bIsRetracted AND tonCartRemoved.Q THEN
			diActualSeqStep				:= 0;
		END_IF
	999:								// Init finished
		bInit_Finished					:= TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="IO" Id="{39def025-d6fb-42e4-a8f1-838c4d1768f8}">
      <Declaration><![CDATA[METHOD  IO
VAR
	indexIO									: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	For considering cart in place
	tonCartIsInPlace(						IN:=bCartPresence,
											PT:=T#1S);

//	For considering cart has been removed
	tonCartRemoved(							IN:=NOT bCartPresence,
												PT:=T#1S);

//	If all places are ocupped request cart removal
	IF siOccupedNests>=8 THEN
		bRemovePiecesRequest				:= TRUE;
//	If cart is removed clear request
	ELSIF tonCartRemoved.Q THEN
		bRemovePiecesRequest				:= FALSE;
	END_IF

//	Piece sensor inverse polaritiy refreshing in available positions var
	IF tonCartIsInPlace.Q AND fbCartLock.bIsExtended THEN
		FOR indexIO:=0 TO 7 BY 1 DO
			byAvailableNests[indexIO]		:= NOT byRejectNestsSensors[indexIO];
		END_FOR;
	ELSE
		FOR indexIO:=0 TO 7 BY 1 DO
			byAvailableNests[indexIO]		:= FALSE;
		END_FOR;
	END_IF

//	For safety box enter permissive
	bSafetyBox_okForEnter					:= tonCartIsInPlace.Q AND fbCartLock.bIsExtended;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manual" Id="{bd5d7f9f-2e54-42b2-b27b-2eaea211983d}">
      <Declaration><![CDATA[METHOD  Manual]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pause" Id="{1af13883-64d8-4728-bf6f-b440c3dfa3ac}">
      <Declaration><![CDATA[METHOD  Pause]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{84642c77-2ff7-4ecd-b4e9-c68a1daa0f7e}">
      <Declaration><![CDATA[METHOD  Stop]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RejectCart">
      <LineId Id="212" Count="13" />
      <LineId Id="77" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Alarm">
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Auto">
      <LineId Id="28" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="54" Count="2" />
      <LineId Id="51" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.CountNests">
      <LineId Id="6" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Init">
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="45" Count="2" />
      <LineId Id="66" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="69" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="75" Count="2" />
      <LineId Id="36" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.IO">
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Manual">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Pause">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_RejectCart.Stop">
      <LineId Id="3" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>